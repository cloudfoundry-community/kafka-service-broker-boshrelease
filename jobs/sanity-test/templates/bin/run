#!/bin/bash

exec 2>&1

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

export PATH=$PATH:/var/vcap/packages/eden-cli/bin
export PATH=$PATH:/var/vcap/packages/bosh-cli/bin
export PATH=$PATH:/var/vcap/packages/kafka-service-broker/bin

export HOME=/var/vcap/sys/run/sanity-test/home
mkdir -p $HOME
export EDEN_CONFIG=/var/vcap/sys/run/sanity-test/home/.eden/config

############################################################################

<%
  broker = link("kafka-service-broker")
  protocol = broker.p("protocol", broker.p("ssl_enabled", false) ? "https" : "http")
  username = broker.p("username")
  password = broker.p("password")
  host = broker.p("external_host", broker.instances.first.address)
  url = "#{protocol}://#{host}"
  uri = "#{protocol}://#{username}:#{password}@#{host}"
  broker.if_p("port") do |broker_port|
    uri += ":#{broker_port}"
    url += ":#{broker_port}"
  end
%>

echo Service catalog
export SB_BROKER_URL=<%= url %>
export SB_BROKER_USERNAME="<%= username %>"
export SB_BROKER_PASSWORD="<%= password %>"

echo SB_BROKER_URL=<%= url %>
echo SB_BROKER_USERNAME="<%= username %>"
echo SB_BROKER_PASSWORD="<%= password %>"

# The rest is copied from src/kafka-service-broker/bin/sanity-test
# TODO: perhaps use the actual file from this repo via a specific package?

function header() {
  echo
  echo "########"
  echo "$@"
  echo
}

export EDEN_CONFIG=${EDEN_CONFIG:-tmp/eden_config_sanity_test}
mkdir -p $(dirname $EDEN_CONFIG)
rm -rf $EDEN_CONFIG

export SB_BROKER_URL=${SB_BROKER_URL:-http://localhost:8100}
export SB_BROKER_USERNAME=${SB_BROKER_USERNAME:-}
export SB_BROKER_PASSWORD=${SB_BROKER_PASSWORD:-}

header "Catalog"
eden catalog
echo

errors=

header "Provision 'topic' plan"
eden provision -s starkandwayne-kafka -p topic

header "Bind 'topic' plan"
export SB_INSTANCE=$(bosh int $EDEN_CONFIG --path /service_instances/0/id)
eden bind
echo

credentials=$(bosh int $EDEN_CONFIG --path /service_instances/0/bindings/0/credentials)
echo "credentials: $credentials"

header "Test 'topic' plan credentials"
topicName=$(bosh int <(echo $credentials) --path /topicName)
kafkaHostnames=$(bosh int <(echo $credentials) --path /hostname)
zkPeers=$(bosh int <(echo $credentials) --path /zkPeers)
uri=$(bosh int <(echo $credentials) --path /uri)

if [[ "$topicName" != "$SB_INSTANCE" ]]; then
  echo "ERROR: expected topicName '$topicName' to equal service instance ID '$SB_INSTANCE'"
  errors=1
fi
if [[ "$uri" != "kafka://$kafkaHostnames/$topicName" ]]; then
  echo "ERROR: expected uri 'kafka://$kafkaHostnames/$topicName' to equal '$uri'"
  errors=1
fi

header "Running tests against 'topic' plan credentials"
# NOTE: kafka-service-broker is currently complained as binary "broker"
echo "$credentials" | broker sanity-test-topic-plan

# TODO - write as Golang since boshrelease already packaging Golang (else need openjdk + kafka)
# export testpath=/var/vcap/sys/run/sanity-test/topic-plan
# mkdir -p $testpath
# kafka-topics.sh --zookeeper $zkPeers --create --if-not-exists --replication-factor 1 --partitions 1 --topic test > $testpath/demo.out
# echo "test message" | kafka-console-producer.sh --broker-list $kafkaHostnames --topic test 2>/dev/null
# kafka-console-consumer.sh --zookeeper $zkPeers --topic test --from-beginning --max-messages 1 >> $testpath/demo.out 2>/dev/null
# kafka-topics.sh --zookeeper $zkPeers --delete --topic test >> $testpath/demo.out 2>/dev/null

header "Unbind 'topic' plan"
eden unbind -b $(bosh int $EDEN_CONFIG --path /service_instances/0/bindings/0/id)

header "Deprovision 'topic' plan"
eden deprovision

if [[ "$errors" == "1" ]]; then
  exit 1
fi


rm -rf $EDEN_CONFIG
errors=

header "Provision 'shared' plan"
eden provision -s starkandwayne-kafka -p shared

header "Bind 'shared' plan"
export SB_INSTANCE=$(bosh int $EDEN_CONFIG --path /service_instances/0/id)
eden bind
echo

credentials=$(bosh int $EDEN_CONFIG --path /service_instances/0/bindings/0/credentials)
echo "credentials: $credentials"

header "Test 'shared' plan credentials"
topicNamePrefix=$(bosh int <(echo $credentials) --path /topicNamePrefix)
kafkaHostnames=$(bosh int <(echo $credentials) --path /hostname)
uri=$(bosh int <(echo $credentials) --path /uri)

if [[ "$topicNamePrefix" != "$SB_INSTANCE" ]]; then
  echo "ERROR: expected topicNamePrefix '$topicNamePrefix' to equal service instance ID '$SB_INSTANCE'"
  errors=1
fi
if [[ "$uri" != "kafka://$kafkaHostnames" ]]; then
  echo "ERROR: expected uri 'kafka://$kafkaHostnames' to equal '$uri'"
  errors=1
fi
# NOTE: kafka-service-broker is currently complained as binary "broker"
echo "$credentials" | broker sanity-test-shared-plan

header "Unbind 'shard' plan"
eden unbind -b $(bosh int $EDEN_CONFIG --path /service_instances/0/bindings/0/id)

header "Deprovision 'shared' plan"
eden deprovision

if [[ "$errors" == "1" ]]; then
  exit 1
fi
